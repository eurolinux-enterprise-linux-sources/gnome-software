From 97b650d46a087f03ea8fb8af147e018b381bb022 Mon Sep 17 00:00:00 2001
From: Richard Hughes <richard@hughsie.com>
Date: Fri, 24 Jul 2015 15:41:06 +0100
Subject: [PATCH] Show a new notification when security updates remain
 unapplied

---
 data/org.gnome.software.gschema.xml |  3 ++
 src/gs-application.c                | 26 ++++++++++++++++++
 src/gs-update-monitor.c             | 55 +++++++++++++++++++++++++++++++------
 3 files changed, 76 insertions(+), 8 deletions(-)

diff --git a/data/org.gnome.software.gschema.xml b/data/org.gnome.software.gschema.xml
index bfd9fb4..4935f39 100644
--- a/data/org.gnome.software.gschema.xml
+++ b/data/org.gnome.software.gschema.xml
@@ -23,6 +23,9 @@
       <default>0</default>
       <summary>The last update check timestamp</summary>
     </key>
+    <key name="security-timestamp" type="x">
+      <default>0</default>
+    </key>
     <key name="install-timestamp" type="x">
       <default>0</default>
       <summary>The last update timestamp</summary>
diff --git a/src/gs-application.c b/src/gs-application.c
index e696424..762ad9f 100644
--- a/src/gs-application.c
+++ b/src/gs-application.c
@@ -322,6 +322,31 @@ profile_activated (GSimpleAction *action,
 }
 
 static void
+offline_updates_cancel (void)
+{
+	GError *error = NULL;
+	if (!pk_offline_cancel (NULL, &error)) {
+		g_warning ("failed to cancel the offline update: %s", error->message);
+		g_error_free (error);
+	}
+}
+
+static void
+reboot_and_install (GSimpleAction *action,
+		    GVariant      *parameter,
+		    gpointer       data)
+{
+	GError *error = NULL;
+
+	if (!pk_offline_trigger (PK_OFFLINE_ACTION_REBOOT, NULL, &error)) {
+		g_warning ("failed to trigger an offline update: %s", error->message);
+		g_error_free (error);
+		return;
+	}
+	gs_reboot (offline_updates_cancel);
+}
+
+static void
 quit_activated (GSimpleAction *action,
 		GVariant      *parameter,
 		gpointer       app)
@@ -476,6 +501,7 @@ static GActionEntry actions[] = {
 	{ "sources", sources_activated, NULL, NULL, NULL },
 	{ "quit", quit_activated, NULL, NULL, NULL },
 	{ "profile", profile_activated, NULL, NULL, NULL },
+	{ "reboot-and-install", reboot_and_install, NULL, NULL, NULL },
 	{ "set-mode", set_mode_activated, "s", NULL, NULL },
 	{ "search", search_activated, "s", NULL, NULL },
 	{ "details", details_activated, "(ss)", NULL, NULL },
diff --git a/src/gs-update-monitor.c b/src/gs-update-monitor.c
index ee0b082..1b374e9 100644
--- a/src/gs-update-monitor.c
+++ b/src/gs-update-monitor.c
@@ -80,6 +80,8 @@ notify_offline_update_available (GsUpdateMonitor *monitor)
 	GNotification *n;
 	const gchar *title;
 	const gchar *body;
+	guint64 elapsed_security = 0;
+	guint64 security_timestamp = 0;
 
 	if (!g_file_query_exists (monitor->offline_update_file, NULL))
 		return;
@@ -95,14 +97,35 @@ notify_offline_update_available (GsUpdateMonitor *monitor)
 	/* rate limit update notifications to once per hour */
 	monitor->reenable_offline_update_id = g_timeout_add_seconds (3600, reenable_offline_update_notification, monitor);
 
-	title = _("Software Updates Available");
-	body = _("Important OS and application updates are ready to be installed");
-	n = g_notification_new (title);
-	g_notification_set_body (n, body);
-	g_notification_add_button_with_target (n, _("View"), "app.set-mode", "s", "updates");
-	g_notification_add_button (n, _("Not Now"), "app.nop");
-	g_notification_set_default_action_and_target (n, "app.set-mode", "s", "updates");
-	g_application_send_notification (monitor->application, "updates-available", n);
+	/* get time in days since we saw the first unapplied security update */
+	g_settings_get (monitor->settings,
+			"security-timestamp", "x", &security_timestamp);
+	if (security_timestamp > 0) {
+		elapsed_security = g_get_monotonic_time () - security_timestamp;
+		elapsed_security /= G_USEC_PER_SEC;
+		elapsed_security /= 60 * 60 * 24;
+	}
+
+	/* only show the scary warning after the user has ignored
+	 * security updates for a full day */
+	if (elapsed_security > 1) {
+		title = _("Security Updates Pending");
+		body = _("It is recommended that you install important updates now");
+		n = g_notification_new (title);
+		g_notification_set_body (n, body);
+		g_notification_add_button (n, _("Restart & Install"), "app.reboot-and-install");
+		g_notification_set_default_action_and_target (n, "app.set-mode", "s", "updates");
+		g_application_send_notification (monitor->application, "updates-available", n);
+	} else {
+		title = _("Software Updates Available");
+		body = _("Important OS and application updates are ready to be installed");
+		n = g_notification_new (title);
+		g_notification_set_body (n, body);
+		g_notification_add_button (n, _("Not Now"), "app.nop");
+		g_notification_add_button_with_target (n, _("View"), "app.set-mode", "s", "updates");
+		g_notification_set_default_action_and_target (n, "app.set-mode", "s", "updates");
+		g_application_send_notification (monitor->application, "updates-available", n);
+	}
 	g_object_unref (n);
 }
 
@@ -307,6 +330,8 @@ get_updates_finished_cb (GObject *object,
 	PkError *error_code;
 	GError *error = NULL;
 	GPtrArray *packages;
+	guint64 security_timestamp = 0;
+	guint64 security_timestamp_old = 0;
 	guint i;
 	PkPackage *pkg;
 
@@ -332,7 +357,21 @@ get_updates_finished_cb (GObject *object,
 	/* we succeeded */
 	monitor->get_updates_due = FALSE;
 
+	/* find security updates, or clear timestamp if there are now none */
 	packages = pk_results_get_package_array (results);
+	g_settings_get (monitor->settings,
+			"security-timestamp", "x", &security_timestamp_old);
+	for (i = 0; i < packages->len; i++) {
+		pkg = (PkPackage *)g_ptr_array_index (packages, i);
+		if (pk_package_get_info (pkg) == PK_INFO_ENUM_SECURITY) {
+			security_timestamp = g_get_monotonic_time ();
+			break;
+		}
+	}
+	if (security_timestamp_old != security_timestamp) {
+		g_settings_set (monitor->settings,
+				"security-timestamp", "x", security_timestamp);
+	}
 
 	g_debug ("Got %d updates", packages->len);
 
-- 
2.4.3

